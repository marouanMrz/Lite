package com.mrz.lite.generators;

import java.io.BufferedWriter;
import java.util.LinkedList;
import java.util.List;

import javax.tools.JavaFileObject;

import com.mrz.lite.models.EntityModel;

public class HelperGenerator implements Generator {
	private boolean fkExistence = false;
	private List<Integer> fkIndex = new LinkedList<Integer>();
	
	@Override
	public void generate(JavaFileObject jfo, EntityModel entityModel) {
		try {
			BufferedWriter bw = new BufferedWriter(jfo.openWriter());
			bw.append("/*");
			bw.newLine();
			bw.append(" * Automatically generated file. DO NOT MODIFY");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * This class was automatically generated by");
			bw.newLine();
			bw.append(" * Lite Framework from the resource data it found.");
			bw.newLine();
			bw.append(" * It should not be modified by hand.");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("package " + entityModel.getPackageName() + ";");
			bw.append(";");
			bw.newLine();
			bw.newLine();
			bw.append("/**");
			bw.newLine();
			bw.append(" * Lite Framework");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * The helper class allows you to define some constants");
			bw.newLine();
			bw.append(" * that create and maintain the database and tables.");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * @author Marouan Marzouga - MRz");
			bw.newLine();
			bw.append(" * marouan.mrz@gmail.com");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("public class " + entityModel.getClassName() + "LiteHelper" + " {");
			bw.newLine();
			bw.append("    private static final String TEXT_TYPE = \" TEXT\";");
			bw.newLine();
			bw.append("    private static final String COMMA_SEP = \",\";");
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unused\")");
			bw.newLine();
			bw.append("    private static final String SQL_CREATE_" + entityModel.getClassName().toUpperCase() + " =");
			bw.newLine();
			bw.append("			\"CREATE TABLE \" + " + entityModel.getClassName() + "Contract.TABLE_NAME +" + "\" (\" +");
			bw.newLine();
			bw.append("			" + entityModel.getClassName() + "Contract._ID +" + "\" INTEGER PRIMARY KEY AUTOINCREMENT,\" +");
			bw.newLine();
			int size = entityModel.getFields().size();
			for (int i = 0; i < size; i++) {
				if(!entityModel.getFields().get(i).getName().toLowerCase().contains("fk")) {
					if (size - i == 1 && !fkExistence) {
						bw.append("			" + entityModel.getClassName() + "Contract." + entityModel.getFields().get(i).getName() + " + TEXT_TYPE +");
					}
					if (fkExistence || size - i > 1) {
						bw.append("			" + entityModel.getClassName() + "Contract." + entityModel.getFields().get(i).getName() + " + TEXT_TYPE + COMMA_SEP +");
					}
					bw.newLine();
				} else {
					this.fkExistence = true;
					this.fkIndex.add(i);
				}
			}
			
			if(fkExistence) {
				for (Integer currentIndex : fkIndex) {
					String type = getClassName(entityModel.getFields().get(currentIndex).getName());
					bw.append("			" + entityModel.getClassName() + "Contract." + entityModel.getFields().get(currentIndex).getName() + " + \" INTEGER\" + COMMA_SEP +");
					bw.newLine();
					if(fkIndex.indexOf(currentIndex) + 1 == fkIndex.size()) {
						bw.append("			" + "\"FOREIGN KEY(\" + " + entityModel.getClassName() + "Contract." + entityModel.getFields().get(currentIndex).getName() + " + \") REFERENCES " 
								+ type + "(\" + " + type + "Contract._ID + " +"\")\" + ");
						bw.newLine();
					} else {
						bw.append("			" + "\"FOREIGN KEY(\" + " + entityModel.getClassName() + "Contract." + entityModel.getFields().get(currentIndex).getName() + " + \") REFERENCES " 
								+ type + "(\" + " + type + "Contract._ID + " +"\")\" + COMMA_SEP +");
						bw.newLine();
					}
				}
			}
			this.fkExistence = false;
			bw.append("			\" )\";");
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unused\")");
			bw.newLine();
			bw.append("    private static final String SQL_DELETE_" + entityModel.getClassName().toUpperCase() +" =");
			bw.newLine();
			bw.append("			\"DROP TABLE IF EXISTS \" + " + entityModel.getClassName() + "Contract" + ".TABLE_NAME;");
			bw.newLine();
			bw.append("}");
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private String getClassName(String pk) {
		String name = pk.substring(pk.indexOf("_") + 1, pk.length());
		char firstLetter = name.charAt(0);
		return firstLetter + name.substring(1, name.length()).toLowerCase();
	}
}

package com.mrz.lite.generators;

import java.io.BufferedWriter;

import javax.tools.JavaFileObject;

import com.mrz.lite.models.EntityModel;

public class CoreGenerator implements Generator {

	@Override
	public void generate(JavaFileObject jfo, EntityModel entityModel) {
		try {
			BufferedWriter bw = new BufferedWriter(jfo.openWriter());
			bw.append("/*");
			bw.newLine();
			bw.append(" * Automatically generated file. DO NOT MODIFY");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * This class was automatically generated by");
			bw.newLine();
			bw.append(" * Lite Framework from the resource data it found.");
			bw.newLine();
			bw.append(" * It should not be modified by hand.");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("package " + entityModel.getPackageName() + ";");
			bw.newLine();
			bw.newLine();
			bw.append("/**");
			bw.newLine();
			bw.append(" * Lite Framework");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * The LiteCore class allows you to build and");
			bw.newLine();
			bw.append(" * maintain your database and tables.");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * @author Marouan Marzouga - MRz");
			bw.newLine();
			bw.append(" * marouan.mrz@gmail.com");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("import android.annotation.SuppressLint;");
			bw.newLine();
			bw.append("import java.lang.reflect.Field;");
			bw.newLine();
			bw.append("import android.annotation.TargetApi;");
			bw.newLine();
			bw.append("import android.content.Context;");
			bw.newLine();
			bw.append("import android.database.sqlite.SQLiteDatabase;");
			bw.newLine();
			bw.append("import android.database.sqlite.SQLiteOpenHelper;");
			bw.newLine();
			bw.append("import android.os.Build;");
			bw.newLine();
			bw.append("import java.util.Hashtable;");
			bw.newLine();
			bw.append("import java.util.Map;");
			bw.newLine();
			bw.append("import java.io.IOException;");
			bw.newLine();
			bw.append("import java.util.Enumeration;");
			bw.newLine();
			bw.append("import java.util.LinkedList;");
			bw.newLine();
			bw.append("import java.util.List;");
			bw.newLine();
			bw.append("import dalvik.system.DexFile;");
			bw.newLine();
			bw.newLine();
			bw.append("@SuppressLint({ \"DefaultLocale\", \"NewApi\" })");
			bw.newLine();
			bw.append("public class LiteCore extends SQLiteOpenHelper {");
			bw.newLine();
			bw.append("    private Hashtable<String, String> sqlCreate;");
			bw.newLine();
			bw.append("    private Hashtable<String, String> sqlDelete;");
			bw.newLine();
			bw.append("    private Hashtable<String, String> sqlStatements;");
			bw.newLine();
			bw.append("    public static final int DATABASE_VERSION = 1;");
			bw.newLine();
			bw.append("    public static final String DATABASE_NAME = \"LiteEmbedded.db\";");
			bw.newLine();
			bw.newLine();
			bw.append("    public LiteCore(Context context) {");
			bw.newLine();
			bw.append("        super(context, DATABASE_NAME, null, DATABASE_VERSION);");
			bw.newLine();
			bw.append("        this.sqlCreate = new Hashtable<String, String>();");
			bw.newLine();
			bw.append("        this.sqlDelete = new Hashtable<String, String>();");
			bw.newLine();
			bw.append("        this.sqlStatements = new Hashtable<String, String>();");
			bw.newLine();
			bw.append("        sqlStatements = getStatements(loadClasses(context, this.getClass()));");
			bw.newLine();
			bw.append("        sqlCreate = getSpecificStatements(sqlStatements, \"create\");");
			bw.newLine();
			bw.append("        sqlDelete = getSpecificStatements(sqlStatements, \"delete\");");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    public void onCreate(SQLiteDatabase db) {");
			bw.newLine();
			bw.append("        for(Map.Entry<String, String> createEntry : sqlCreate.entrySet()) {");
			bw.newLine();
			bw.append("            db.execSQL(createEntry.getValue());");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {");
			bw.newLine();
			bw.append("        for(Map.Entry<String, String> deleteEntry : sqlDelete.entrySet()) {");
			bw.newLine();
			bw.append("            db.execSQL(deleteEntry.getValue());");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("        onCreate(db);");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    @TargetApi(Build.VERSION_CODES.HONEYCOMB)");
			bw.newLine();
			bw.append("    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {");
			bw.newLine();
			bw.append("        super.onDowngrade(db, oldVersion, newVersion);");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    public static List<Class<?>> loadClasses(Context context, Class<?> clazz) {");
			bw.newLine();
			bw.append("        List<Class<?>> classes = new LinkedList<Class<?>>();");
			bw.newLine();
			bw.append("            try {");
			bw.newLine();
			bw.append("                DexFile df = new DexFile(context.getPackageCodePath());");
			bw.newLine();
			bw.append("                for (Enumeration<String> iter = df.entries(); iter.hasMoreElements();) {");
			bw.newLine();
			bw.append("                    String fullNameClass = iter.nextElement();");
			bw.newLine();
			bw.append("                    if (fullNameClass.contains(\"LiteHelper\")) {");
			bw.newLine();
			bw.append("                        classes.add(df.loadClass(fullNameClass, clazz.getClassLoader()));");
			bw.newLine();
			bw.append("                    }");
			bw.newLine();
			bw.append("                }");
			bw.newLine();
			bw.append("            } catch (IOException e) {");
			bw.newLine();
			bw.append("                e.printStackTrace();");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("            return classes;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    private Hashtable<String, String> getStatements(List<Class<?>> classes) {");
			bw.newLine();
			bw.append("        Hashtable<String, String> statements = new Hashtable<String, String>();");
			bw.newLine();
			bw.append("            for (Class<?> cl : classes) {");
			bw.newLine();
			bw.append("                try {");
			bw.newLine();
			bw.append("                    for (Field field : cl.getDeclaredFields()) {");
			bw.newLine();
			bw.append("                        field.setAccessible(true);");
			bw.newLine();
			bw.append("                        if (field.getName().toLowerCase().contains(\"sql\")) {");
			bw.newLine();
			bw.append("                            statements.put(field.getName(), field.get(field.getName()).toString());");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        field.setAccessible(false);");
			bw.newLine();
			bw.append("                    }");
			bw.newLine();
			bw.append("                    } catch (Exception e) {");
			bw.newLine();
			bw.append("                        e.printStackTrace();");
			bw.newLine();
			bw.append("                    }");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("            return statements;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    private Hashtable<String, String> getSpecificStatements(Hashtable<String, String> statement, String type) {");
			bw.newLine();
			bw.append("        Hashtable<String, String> specificStatements = new Hashtable<String, String>();");
			bw.newLine();
			bw.append("        for (Map.Entry<String, String> statementEntry : statement.entrySet()) {");
			bw.newLine();
			bw.append("            if (statementEntry.getKey().toLowerCase().contains(type.toLowerCase())) {");
			bw.newLine();
			bw.append("                specificStatements.put(statementEntry.getKey(), statementEntry.getValue());");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("        return specificStatements;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.append("}");
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}

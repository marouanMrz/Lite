package com.mrz.lite.generators;

import java.io.BufferedWriter;

import javax.tools.JavaFileObject;

import com.mrz.lite.models.EntityModel;

public class DaoGenerator implements Generator {

	@Override
	public void generate(JavaFileObject jfo, EntityModel entityModel) {
		try {
			BufferedWriter bw = new BufferedWriter(jfo.openWriter());
			bw.append("/*");
			bw.newLine();
			bw.append(" * Automatically generated file. DO NOT MODIFY");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * This class was automatically generated by");
			bw.newLine();
			bw.append(" * Lite Framework from the resource data it found.");
			bw.newLine();
			bw.append(" * It should not be modified by hand.");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("package " + entityModel.getPackageName() + ";");
			bw.newLine();
			bw.newLine();
			bw.append("/**");
			bw.newLine();
			bw.append(" * Lite Framework");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * The LiteDao class allows you to do CRUD ");
			bw.newLine();
			bw.append(" * operations on a specific entity.");
			bw.newLine();
			bw.append(" * ");
			bw.newLine();
			bw.append(" * @author Marouan Marzouga - MRz");
			bw.newLine();
			bw.append(" * marouan.mrz@gmail.com");
			bw.newLine();
			bw.append(" */");
			bw.newLine();
			bw.newLine();
			bw.append("import java.lang.reflect.Field;");
			bw.newLine();
			bw.append("import java.lang.reflect.Method;");
			bw.newLine();
			bw.append("import java.util.LinkedList;");
			bw.newLine();
			bw.append("import java.util.List;");
			bw.newLine();
			bw.newLine();
			bw.append("import com.mrz.lite.annotations.LiteManyToMany;");
			bw.newLine();
			bw.append("import com.mrz.lite.annotations.LiteManyToOne;");
			bw.newLine();
			bw.append("import com.mrz.lite.annotations.LiteOneToOne;");
			bw.newLine();
			bw.newLine();
			bw.append("import android.content.ContentValues;");
			bw.newLine();
			bw.append("import android.content.Context;");
			bw.newLine();
			bw.append("import android.database.Cursor;");
			bw.newLine();
			bw.append("import android.database.sqlite.SQLiteDatabase;");
			bw.newLine();
			bw.newLine();
			bw.append("public class LiteDao {");
			bw.newLine();
			bw.append("    private Class<?> entityClazz;");
			bw.newLine();
			bw.append("    private SQLiteDatabase db;");
			bw.newLine();
			bw.append("    private LiteCore liteCore;");
			bw.newLine();
			bw.append("    private Class<?> oldClazz;");
			bw.newLine();
			bw.newLine();
			bw.append("    public LiteDao(Context context, Class<?> entityClass) {");
			bw.newLine();
			bw.append("        this.liteCore = new LiteCore(context);");
			bw.newLine();
			bw.append("        this.entityClazz = entityClass;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unchecked\")");
			bw.newLine();
			bw.append("    public <T extends Object> List<T> selectAll() {");
			bw.newLine();
			bw.append("        List<Object> all = new LinkedList<Object>();");
			bw.newLine();
			bw.append("        db = liteCore.getReadableDatabase();");
			bw.newLine();
			bw.append("        Cursor cursor = db.query(entityClazz.getSimpleName(), null, null, null, null, null, null);");
			bw.newLine();
			bw.append("        all = instanceConstructor(cursor);");
			bw.newLine();
			bw.append("        cursor.close();");
			bw.newLine();
			bw.append("        db.close();");
			bw.newLine();
			bw.append("        return (List<T>) all;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    public long insert(Object object) {");
			bw.newLine();
			bw.append("        if (object.getClass().isAssignableFrom(entityClazz)) {");
			bw.newLine();
			bw.append("            db = liteCore.getWritableDatabase();");
			bw.newLine();
			bw.append("            ContentValues values = new ContentValues();");
			bw.newLine();
			bw.append("            String nullColumnHack = null;");
			bw.newLine();
			bw.append("            List<Long> fks_left = new LinkedList<Long>();");
			bw.newLine();
			bw.append("            boolean mtom = false;");
			bw.newLine();
			bw.append("            String mappedBy = null;");
			bw.newLine();
			bw.append("            String idUpdate = null;");
			bw.newLine();
			bw.append("            Boolean update = false;");
			bw.newLine();
			bw.append("            for (Field field : entityClazz.getDeclaredFields()) {");
			bw.newLine();
			bw.append("                if(!\"_id\".equals(field.getName())) {");
			bw.newLine();
			bw.append("                    field.setAccessible(true);");
			bw.newLine();
			bw.append("                    Boolean oneOrManyToOne = false;");
			bw.newLine();
			bw.append("                    try {");
			bw.newLine();
			bw.append("                        Field fieldIdUpdate = entityClazz.getDeclaredField(\"_id\");");
			bw.newLine();
			bw.append("                        fieldIdUpdate.setAccessible(true);");
			bw.newLine();
			bw.append("                        idUpdate = fieldIdUpdate.get(object).toString();");
			bw.newLine();
			bw.append("                        update = (idUpdate.equals(\"0\")) ? false : true;");
			bw.newLine();
			bw.append("                        fieldIdUpdate.setAccessible(false);");
			bw.newLine();
			bw.append("                        if(field.isAnnotationPresent(LiteOneToOne.class)) {");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteOneToOne.class).mappedBy();");
			bw.newLine();
			bw.append("                            oneOrManyToOne = true;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (field.isAnnotationPresent(LiteManyToOne.class)){");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteManyToOne.class).mappedBy();");
			bw.newLine();
			bw.append("                            oneOrManyToOne = true;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (oneOrManyToOne) {");
			bw.newLine();
			bw.append("                            switchClazz(mappedBy);");
			bw.newLine();
			bw.append("                            Field idFieldToGet = entityClazz.getDeclaredField(\"_id\");");
			bw.newLine();
			bw.append("                            idFieldToGet.setAccessible(true);");
			bw.newLine();
			bw.append("                            if (idFieldToGet.get(field.get(object)).equals(0)) {");
			bw.newLine();
			bw.append("                                long fk = insert(field.get(object));");
			bw.newLine();
			bw.append("                                values.put(\"fk_\" + mappedBy, fk);");
			bw.newLine();
			bw.append("                            } else values.put(\"fk_\" + mappedBy, Long.parseLong(idFieldToGet.get(field.get(object)).toString()));");
			bw.newLine();
			bw.append("                            idFieldToGet.setAccessible(false);");
			bw.newLine();
			bw.append("                            reopen(\"w\", true);");
			bw.newLine();
			bw.append("                            oneOrManyToOne = false;");
			bw.newLine();
			bw.append("                            continue;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (field.isAnnotationPresent(LiteManyToMany.class)) {");
			bw.newLine();
			bw.append("                            mtom = true;");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteManyToMany.class).mappedBy();");
			bw.newLine();
			bw.append("                            switchClazz(mappedBy);");
			bw.newLine();
			bw.append("                            @SuppressWarnings(\"unchecked\")");
			bw.newLine();
			bw.append("                            List<Object> objects = (List<Object>) field.get(object);");
			bw.newLine();
			bw.append("                            Field idFieldToGet = entityClazz.getDeclaredField(\"_id\");");
			bw.newLine();
			bw.append("                            for (Object obj : objects) {");
			bw.newLine();
			bw.append("                                idFieldToGet.setAccessible(true);");
			bw.newLine();
			bw.append("                                if (idFieldToGet.get(obj).equals(0)) {");
			bw.newLine();
			bw.append("                                    long fk_left = insert(obj);");
			bw.newLine();
			bw.append("                                    fks_left.add(fk_left);");
			bw.newLine();
			bw.append("                                } else fks_left.add(Long.parseLong(idFieldToGet.get(obj).toString()));");
			bw.newLine();
			bw.append("                                idFieldToGet.setAccessible(false);");
			bw.newLine();
			bw.append("                            }");
			bw.newLine();
			bw.append("                            reopen(\"w\", true);");
			bw.newLine();
			bw.append("                            continue;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if(!field.getGenericType().toString().contains(\"<\") ) {");
			bw.newLine();
			bw.append("                            values.put(field.getName(), field.get(object).toString());");
			bw.newLine();
			bw.append("                            nullColumnHack = field.getName();");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                    } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException e) {");
			bw.newLine();
			bw.append("                        e.printStackTrace();");
			bw.newLine();
			bw.append("                    }");
			bw.newLine();
			bw.append("                    field.setAccessible(false);");
			bw.newLine();
			bw.append("                }");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("            long id = 0;");
			bw.newLine();
			bw.append("            if (update) {");
			bw.newLine();
			bw.append("                id = Long.parseLong(idUpdate);");
			bw.newLine();
			bw.append("                db.update(entityClazz.getSimpleName(), values, \"_id=\" + idUpdate, null);");
			bw.newLine();
			bw.append("            } else {");
			bw.newLine();
			bw.append("                id = db.insert(entityClazz.getSimpleName(), nullColumnHack, values);");
			bw.newLine();
			bw.append("                try {");
			bw.newLine();
			bw.append("                    Field idFieldToSet = entityClazz.getDeclaredField(\"_id\");");
			bw.newLine();
			bw.append("                    idFieldToSet.setAccessible(true);");
			bw.newLine();
			bw.append("                    idFieldToSet.set(object, Integer.parseInt(Long.toString(id)));");
			bw.newLine();
			bw.append("                    idFieldToSet.setAccessible(false);");
			bw.newLine();
			bw.append("                } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException e) {");
			bw.newLine();
			bw.append("                    e.printStackTrace();");
			bw.newLine();
			bw.append("                }");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("            if (mtom) {");
			bw.newLine();
			bw.append("                for(long fk : fks_left) {");
			bw.newLine();
			bw.append("                    ContentValues xrefValues = new ContentValues();");
			bw.newLine();
			bw.append("                    xrefValues.put(\"fk_\" + entityClazz.getSimpleName(), id);");
			bw.newLine();
			bw.append("                    xrefValues.put(\"fk_\" + mappedBy, fk);");
			bw.newLine();
			bw.append("                    db.insert(entityClazz.getSimpleName() + mappedBy, \"fk_\" + mappedBy, xrefValues);");
			bw.newLine();
			bw.append("                }");
			bw.newLine();
			bw.append("                mtom = false;");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("            db.close();");
			bw.newLine();
			bw.append("            return id;");
			bw.newLine();
			bw.append("        } else return 0;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unchecked\")");
			bw.newLine();
			bw.append("    public <T extends Object> List<T> selectByField(String fieldName, String fieldValue) {");
			bw.newLine();
			bw.append("        db = liteCore.getReadableDatabase();");
			bw.newLine();
			bw.append("        Cursor cursor = db.rawQuery(\"SELECT * FROM \"+ entityClazz.getSimpleName() +\" WHERE \"+ fieldName +\"=?\", new String[] {fieldValue});");
			bw.newLine();
			bw.append("        List<Object> list = instanceConstructor(cursor);");
			bw.newLine();
			bw.append("        cursor.close();");
			bw.newLine();
			bw.append("        db.close();");
			bw.newLine();
			bw.append("        return (List<T>) list;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unchecked\")");
			bw.newLine();
			bw.append("    public <T extends Object> List<T> selectManyToMany(Class<?> entityClazz, String mappedBy, String id) {");
			bw.newLine();
			bw.append("        db = liteCore.getReadableDatabase();");
			bw.newLine();
			bw.append("        Cursor cursor = db.rawQuery(\"SELECT fk_\" + mappedBy + \" FROM \" + entityClazz.getSimpleName() + mappedBy +\" WHERE fk_\" + entityClazz.getSimpleName() + \"=?\", new String[] {id});");
			bw.newLine();
			bw.append("        List<Object> objects = new LinkedList<Object>();");
			bw.newLine();
			bw.append("        if (cursor != null) {");
			bw.newLine();
			bw.append("            cursor.moveToFirst();");
			bw.newLine();
			bw.append("            while (!cursor.isAfterLast()) {");
			bw.newLine();
			bw.append("                String currentId = cursor.getString(cursor.getColumnIndex(\"fk_\" + mappedBy));");
			bw.newLine();
			bw.append("                Cursor internCursor = db.rawQuery(\"SELECT * FROM \"+ mappedBy +\" WHERE _id=?\", new String[] {currentId});");
			bw.newLine();
			bw.append("                switchClazz(mappedBy);");
			bw.newLine();
			bw.append("                List<Object> currentObject = instanceConstructor(internCursor);");
			bw.newLine();
			bw.append("                reopen(\"r\", true);");
			bw.newLine();
			bw.append("                internCursor.close();");
			bw.newLine();
			bw.append("                objects.add(currentObject.get(0));");
			bw.newLine();
			bw.append("                cursor.moveToNext();");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("        cursor.close();");
			bw.newLine();
			bw.append("        db.close();");
			bw.newLine();
			bw.append("        return (List<T>) objects;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    @SuppressWarnings(\"unchecked\")");
			bw.newLine();
			bw.append("    private <T extends Object> List<T> instanceConstructor(Cursor cursor) {");
			bw.newLine();
			bw.append("        List<Object> all = new LinkedList<Object>();");
			bw.newLine();
			bw.append("        if (cursor != null) {");
			bw.newLine();
			bw.append("            cursor.moveToFirst();");
			bw.newLine();
			bw.append("            while (!cursor.isAfterLast()) {");
			bw.newLine();
			bw.append("                Object currentInstance = null;");
			bw.newLine();
			bw.append("                try {");
			bw.newLine();
			bw.append("                    currentInstance = Class.forName(entityClazz.getName()).newInstance();");
			bw.newLine();
			bw.append("                    for (Field field : entityClazz.getDeclaredFields()) {");
			bw.newLine();
			bw.append("                        field.setAccessible(true);");
			bw.newLine();
			bw.append("                        String mappedBy = null;");
			bw.newLine();
			bw.append("                        Boolean oneOrManyToOne = false;");
			bw.newLine();
			bw.append("                        if (field.isAnnotationPresent(LiteOneToOne.class)) {");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteOneToOne.class).mappedBy();");
			bw.newLine();
			bw.append("                            oneOrManyToOne = true;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (field.isAnnotationPresent(LiteManyToOne.class)) {");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteManyToOne.class).mappedBy();");
			bw.newLine();
			bw.append("                            oneOrManyToOne = true;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (oneOrManyToOne) {");
			bw.newLine();
			bw.append("                            switchClazz(mappedBy);");
			bw.newLine();
			bw.append("                            List<Object> obj = selectByField(\"_id\", cursor.getString(cursor.getColumnIndex(\"fk_\" + mappedBy)));");
			bw.newLine();
			bw.append("                            field.set(currentInstance, obj.get(0));");
			bw.newLine();
			bw.append("                            reopen(\"r\", true);");
			bw.newLine();
			bw.append("                            oneOrManyToOne = false;");
			bw.newLine();
			bw.append("                            continue;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if (field.isAnnotationPresent(LiteManyToMany.class)) {");
			bw.newLine();
			bw.append("                            mappedBy = field.getAnnotation(LiteManyToMany.class).mappedBy();");
			bw.newLine();
			bw.append("                            String id = cursor.getString(cursor.getColumnIndex(\"_id\"));");
			bw.newLine();
			bw.append("                            List<Object> objects = selectManyToMany(entityClazz, mappedBy, id);");
			bw.newLine();
			bw.append("                            field.set(currentInstance, objects);");
			bw.newLine();
			bw.append("                            reopen(\"r\", false);");
			bw.newLine();
			bw.append("                            continue;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        Class<?> wrapper = null;");
			bw.newLine();
			bw.append("                        switch (field.getType().toString()) {");
			bw.newLine();
			bw.append("                            case \"boolean\":");
			bw.newLine();
			bw.append("                                wrapper = Boolean.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"byte\":");
			bw.newLine();
			bw.append("                                wrapper = Byte.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"float\":");
			bw.newLine();
			bw.append("                                wrapper = Float.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"int\":");
			bw.newLine();
			bw.append("                                wrapper = Integer.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"long\":");
			bw.newLine();
			bw.append("                                wrapper = Long.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"short\":");
			bw.newLine();
			bw.append("                                wrapper = Short.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            case \"double\":");
			bw.newLine();
			bw.append("                                wrapper = Double.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                            default:");
			bw.newLine();
			bw.append("                                wrapper = String.class;");
			bw.newLine();
			bw.append("                                break;");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        if(!field.getGenericType().toString().contains(\"<\") ) {");
			bw.newLine();
			bw.append("                            if (field.getType().isAssignableFrom(String.class)) {");
			bw.newLine();
			bw.append("                                field.set(currentInstance, cursor.getString(cursor.getColumnIndex(field.getName())));");
			bw.newLine();
			bw.append("                            } else {");
			bw.newLine();
			bw.append("                                Method parseInvoke = wrapper.getMethod(\"valueOf\", String.class);");
			bw.newLine();
			bw.append("                                field.set(currentInstance, parseInvoke.invoke(wrapper, cursor.getString(cursor.getColumnIndex(field.getName()))));");
			bw.newLine();
			bw.append("                            }");
			bw.newLine();
			bw.append("                        }");
			bw.newLine();
			bw.append("                        field.setAccessible(false);");
			bw.newLine();
			bw.append("                    }");
			bw.newLine();
			bw.append("                    all.add(currentInstance);");
			bw.newLine();
			bw.append("                } catch (Exception e) {");
			bw.newLine();
			bw.append("                    e.printStackTrace();");
			bw.newLine();
			bw.append("                }");
			bw.newLine();
			bw.append("                cursor.moveToNext();");
			bw.newLine();
			bw.append("            }");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("        return (List<T>) all;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    private void switchClazz(String clazz) {");
			bw.newLine();
			bw.append("        oldClazz = entityClazz;");
			bw.newLine();
			bw.append("        String oldString = oldClazz.getName();");
			bw.newLine();
			bw.append("        try {");
			bw.newLine();
			bw.append("            entityClazz = Class.forName(oldString.subSequence(0, oldString.lastIndexOf(\".\")) + \".\" + clazz);");
			bw.newLine();
			bw.append("        } catch (ClassNotFoundException e) {");
			bw.newLine();
			bw.append("            e.printStackTrace();");
			bw.newLine();
			bw.append("        }");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.newLine();
			bw.append("    private void reopen(String mode, boolean switzz) {");
			bw.newLine();
			bw.append("        db = (\"r\".equals(mode)) ? liteCore.getReadableDatabase() : liteCore.getWritableDatabase();");
			bw.newLine();
			bw.append("        if (switzz) entityClazz = oldClazz;");
			bw.newLine();
			bw.append("    }");
			bw.newLine();
			bw.append("}");
			bw.close(); 
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
